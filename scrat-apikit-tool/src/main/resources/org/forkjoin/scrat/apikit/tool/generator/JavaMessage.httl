<!--#set(MessageInfo m)-->
<!--#set(PropertyInfo attr)-->
<!--#set(JavaMessageWrapper utils)-->
<!--#set(TypeInfo type)-->
package $!{utils.getDistPack()};

$!{utils.imports}


import org.forkjoin.scrat.apikit.client.*;

import java.time.*;
import java.util.*;
import java.util.Map.Entry;
import java.util.AbstractMap.SimpleImmutableEntry;

import java.util.concurrent.atomic.*;


/**
$!{utils.comment(" * ")}
 */
public class $!{utils.distName}$!{utils.typeParameters} $!{utils.superInfo}{
<!--#for(attr : m.properties)-->
<!--    #if(!attr.isSuperProperty)-->
<!--		#if(attr.comment)-->
	/**
$!{utils.formatComment(attr.comment,"	 * ")}
	 */
<!--		#end-->
<!--$!{utils.formatAnnotations(attr.annotations,"	")}-->
	private $!{utils.toJavaTypeString(attr.typeInfo, true, false)} $!{attr.name};
<!--    #end-->
<!--#end-->

	public $!{m.name}(){
	}

<!--#if(!m.properties.empty())-->
	public $!{m.name}($!{utils.getConstructorString()}){
<!--    #for(attr : m.properties)-->
<!--        #if(!attr.isSuperProperty)-->
		this.$!{attr.name} = $!{attr.name};
<!--		#end-->
<!--    #end-->
	}
<!--#end-->

<!--#for(attr : m.properties)-->

<!--    #if(!attr.isSuperProperty)-->
<!--		#if(attr.comment)-->
	/**
$!{utils.formatComment(attr.comment,"	 * ")}
	 */
<!--		#end-->
	public $!{utils.toJavaTypeString(attr.typeInfo, true, false)} $!{utils.toJavaGetName(attr)}() {
		return $!{attr.name};
	}

<!--		#if(attr.comment)-->
	/**
$!{utils.formatComment(attr.comment,"	 * ")}
	 */
<!--		#end-->
	public void $!{utils.toJavaSetName(attr)}($!{utils.toJavaTypeString(attr.typeInfo, true, false)} $!{attr.name}) {
		this.$!{attr.name} = $!{attr.name};
	}
<!--    #end-->
<!--#end-->

	public List<Entry<String, Object>> encode(String $parent, List<Entry<String, Object>> $list) {
<!--#if(utils.isHasSuper)-->
	    super.encode($parent, $list);
<!--#end-->
		$!{utils.getEncodeCode("        ", "$parent")}
    }

	@Override
	public String toString() {
		return $!{utils.getToString};
	}
}